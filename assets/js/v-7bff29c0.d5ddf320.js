"use strict";(self.webpackChunknote=self.webpackChunknote||[]).push([[303],{2125:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7bff29c0",path:"/pages/84117f/",title:"README",lang:"en-US",frontmatter:{title:"README",date:"2022-06-06T09:09:08.000Z",permalink:"/pages/84117f/",categories:["packages","npm","commander"],tags:[null]},excerpt:"",headers:[{level:2,title:"一、快速上手",slug:"一、快速上手",children:[{level:3,title:"1. Commander: The complete solution for node.js command-line interfaces.",slug:"_1-commander-the-complete-solution-for-node-js-command-line-interfaces",children:[]},{level:3,title:"3. program.name()修改帮助信息中程序名称",slug:"_3-program-name-修改帮助信息中程序名称",children:[]},{level:3,title:"4. program.usage()自定义帮助信息里面的使用描述信息",slug:"_4-program-usage-自定义帮助信息里面的使用描述信息",children:[]},{level:3,title:"5. 自定义 version 选项的两种方式",slug:"_5-自定义-version-选项的两种方式",children:[]},{level:3,title:"6. program.opts() 能够拿到 program.parse(arguments)解析后的 options 参数",slug:"_6-program-opts-能够拿到-program-parse-arguments-解析后的-options-参数",children:[]},{level:3,title:"7. program.outputHelp() 使用代码的形式展示帮助信息，不退出程序。",slug:"_7-program-outputhelp-使用代码的形式展示帮助信息-不退出程序。",children:[]},{level:3,title:"8. program.showHelpAfterError() 在出错后展示帮助信息",slug:"_8-program-showhelpaftererror-在出错后展示帮助信息",children:[]},{level:3,title:"9. 如何利用 program.args 的特性，监听未知命令？",slug:"_9-如何利用-program-args-的特性-监听未知命令",children:[]},{level:3,title:"10. 命令处理函数 action()的参数含义是什么？以及它该怎么用？",slug:"_10-命令处理函数-action-的参数含义是什么-以及它该怎么用",children:[]}]},{level:2,title:"附录 A:",slug:"附录-a",children:[{level:3,title:"commander 官方文档",slug:"commander-官方文档",children:[]}]}],filePathRelative:"packages/@npm/commander/README.md",git:{updatedTime:1657677456e3,contributors:[{name:"yunchao.mei",email:"",commits:1}]}}},3828:(n,s,a)=>{a.r(s),a.d(s,{default:()=>A});var p=a(6252);const t=(0,p._)("h1",{id:"npm-package-commander-调研报告",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#npm-package-commander-调研报告","aria-hidden":"true"},"#"),(0,p.Uk)(" NPM Package Commander 调研报告")],-1),o={class:"custom-container tip"},e=(0,p._)("p",{class:"custom-container-title"},"TIP",-1),c=(0,p._)("p",null,[(0,p._)("code",null,"1.Target：调研目标"),(0,p.Uk)(),(0,p._)("br")],-1),l=(0,p._)("ul",null,[(0,p._)("li",null,"熟悉 Commander 的使用")],-1),u=(0,p._)("p",null,[(0,p._)("code",null,"2.Title：调研目录")],-1),r={class:"table-of-contents"},i=(0,p.Uk)("一、快速上手"),k=(0,p.Uk)("1. Commander: The complete solution for node.js command-line interfaces."),m=(0,p.Uk)("3. program.name()修改帮助信息中程序名称"),d=(0,p.Uk)("4. program.usage()自定义帮助信息里面的使用描述信息"),g=(0,p.Uk)("5. 自定义 version 选项的两种方式"),b=(0,p.Uk)("6. program.opts() 能够拿到 program.parse(arguments)解析后的 options 参数"),h=(0,p.Uk)("7. program.outputHelp() 使用代码的形式展示帮助信息，不退出程序。"),f=(0,p.Uk)("8. program.showHelpAfterError() 在出错后展示帮助信息"),_=(0,p.Uk)("9. 如何利用 program.args 的特性，监听未知命令？"),v=(0,p.Uk)("10. 命令处理函数 action()的参数含义是什么？以及它该怎么用？"),q=(0,p.Uk)("附录 A:"),w=(0,p.Uk)("commander 官方文档"),j=(0,p.uE)('<h2 id="一、快速上手" tabindex="-1"><a class="header-anchor" href="#一、快速上手" aria-hidden="true">#</a> 一、快速上手</h2><h3 id="_1-commander-the-complete-solution-for-node-js-command-line-interfaces" tabindex="-1"><a class="header-anchor" href="#_1-commander-the-complete-solution-for-node-js-command-line-interfaces" aria-hidden="true">#</a> 1. Commander: The complete solution for node.js command-line interfaces.</h3><h3 id="_3-program-name-修改帮助信息中程序名称" tabindex="-1"><a class="header-anchor" href="#_3-program-name-修改帮助信息中程序名称" aria-hidden="true">#</a> 3. program.name()修改帮助信息中程序名称</h3><ul><li><code>program.name()</code>，程序名称，即主命令名称。默认值是 index。</li><li>参数用例，<code>例如，program.name(Object.keys(pkg.bin)[0])</code></li></ul><h3 id="_4-program-usage-自定义帮助信息里面的使用描述信息" tabindex="-1"><a class="header-anchor" href="#_4-program-usage-自定义帮助信息里面的使用描述信息" aria-hidden="true">#</a> 4. program.usage()自定义帮助信息里面的使用描述信息</h3><ul><li>参数用例，<code>例如，program.usage(&#39;[option] [command]&#39;)</code></li></ul><h3 id="_5-自定义-version-选项的两种方式" tabindex="-1"><a class="header-anchor" href="#_5-自定义-version-选项的两种方式" aria-hidden="true">#</a> 5. 自定义 version 选项的两种方式</h3><ul><li>1.方式 1：version api<code>例如，program.version(pkg.version)</code></li><li>2.方式 2：option api</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>program\n  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>bin<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">&quot;[options] [command]&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// true 是 [version] 参数的默认值</span>\n  <span class="token comment">// [] 表示可选 || &lt;&gt; 表示必传</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-v, --version [version]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;output the version number&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;option:version&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  program<span class="token punctuation">.</span><span class="token function">opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>version<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_6-program-opts-能够拿到-program-parse-arguments-解析后的-options-参数" tabindex="-1"><a class="header-anchor" href="#_6-program-opts-能够拿到-program-parse-arguments-解析后的-options-参数" aria-hidden="true">#</a> 6. program.opts() 能够拿到 program.parse(arguments)解析后的 options 参数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-d, --debug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;output extra debugging&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-s, --small&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;small pizza size&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-p, --pizza-type &lt;type&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;flavour of pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> program<span class="token punctuation">.</span><span class="token function">opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cli-name -d -s -&gt; { debug: true, small: true }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_7-program-outputhelp-使用代码的形式展示帮助信息-不退出程序。" tabindex="-1"><a class="header-anchor" href="#_7-program-outputhelp-使用代码的形式展示帮助信息-不退出程序。" aria-hidden="true">#</a> 7. program.outputHelp() 使用代码的形式展示帮助信息，不退出程序。</h3><h3 id="_8-program-showhelpaftererror-在出错后展示帮助信息" tabindex="-1"><a class="header-anchor" href="#_8-program-showhelpaftererror-在出错后展示帮助信息" aria-hidden="true">#</a> 8. program.showHelpAfterError() 在出错后展示帮助信息</h3><ul><li>参数用例： <ul><li><ol><li><code>program.showHelpAfterError()</code> 展示完整的帮助信息</li></ol></li><li><ol start="2"><li><code>program.showHelpAfterError(&#39;(add --help for additional information)&#39;)</code> 自定义帮助信息</li></ol></li></ul></li></ul><h3 id="_9-如何利用-program-args-的特性-监听未知命令" tabindex="-1"><a class="header-anchor" href="#_9-如何利用-program-args-的特性-监听未知命令" aria-hidden="true">#</a> 9. 如何利用 program.args 的特性，监听未知命令？</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;command:*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。</span>\n  <span class="token comment">// 这里的obj === program.args</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;出现未知命令:&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> availableCommands <span class="token operator">=</span> program<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>availableCommands<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;可用命令有：&quot;</span><span class="token punctuation">,</span> availableCommands<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_10-命令处理函数-action-的参数含义是什么-以及它该怎么用" tabindex="-1"><a class="header-anchor" href="#_10-命令处理函数-action-的参数含义是什么-以及它该怎么用" aria-hidden="true">#</a> 10. 命令处理函数 action()的参数含义是什么？以及它该怎么用？</h3><ul><li><p>1.命令处理函数的参数，为该命令声明的所有参数，除此之外还会附加两个额外参数：一个是解析出的选项，另一个则是该命令对象自身。</p></li><li><p>2.测试用例</p><ul><li>2-1：在全局命令上使用处理函数<code>program.action()</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram\n  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;commander-cli&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">&quot;[option] [command]&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-d, --debug [name]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;debug model&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">option<span class="token punctuation">,</span> command</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> command<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// commander-cli -d -&gt; { debug: &#39;true&#39; } commander-cli</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>2-2：在普通命令上使用处理函数<code>program.command().action()</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;commander-cli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram\n  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;name&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;初始化项目的名称，必传&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">&quot;[loc]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;自定义初始化路径&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-f, --force&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;强制执行init&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> loc<span class="token punctuation">,</span> options<span class="token punctuation">,</span> command</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> command<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// commander-cli init project-name -f -&gt; project-name { force: true } init</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><h2 id="附录-a" tabindex="-1"><a class="header-anchor" href="#附录-a" aria-hidden="true">#</a> 附录 A:</h2>',19),y={id:"commander-官方文档",tabindex:"-1"},x=(0,p._)("a",{class:"header-anchor",href:"#commander-官方文档","aria-hidden":"true"},"#",-1),C=(0,p.Uk)(),U={href:"https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("commander 官方文档"),W={},A=(0,a(3744).Z)(W,[["render",function(n,s){const a=(0,p.up)("RouterLink"),W=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("div",o,[e,c,l,u,(0,p._)("nav",r,[(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#一、快速上手"},{default:(0,p.w5)((()=>[i])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_1-commander-the-complete-solution-for-node-js-command-line-interfaces"},{default:(0,p.w5)((()=>[k])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_3-program-name-修改帮助信息中程序名称"},{default:(0,p.w5)((()=>[m])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_4-program-usage-自定义帮助信息里面的使用描述信息"},{default:(0,p.w5)((()=>[d])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_5-自定义-version-选项的两种方式"},{default:(0,p.w5)((()=>[g])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_6-program-opts-能够拿到-program-parse-arguments-解析后的-options-参数"},{default:(0,p.w5)((()=>[b])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_7-program-outputhelp-使用代码的形式展示帮助信息-不退出程序。"},{default:(0,p.w5)((()=>[h])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_8-program-showhelpaftererror-在出错后展示帮助信息"},{default:(0,p.w5)((()=>[f])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_9-如何利用-program-args-的特性-监听未知命令"},{default:(0,p.w5)((()=>[_])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#_10-命令处理函数-action-的参数含义是什么-以及它该怎么用"},{default:(0,p.w5)((()=>[v])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#附录-a"},{default:(0,p.w5)((()=>[q])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#commander-官方文档"},{default:(0,p.w5)((()=>[w])),_:1})])])])])])]),j,(0,p._)("h3",y,[x,C,(0,p._)("a",U,[E,(0,p.Wm)(W)])])],64)}]])}}]);