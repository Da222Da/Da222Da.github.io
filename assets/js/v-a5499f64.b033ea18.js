"use strict";(self.webpackChunknote=self.webpackChunknote||[]).push([[395],{718:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-a5499f64",path:"/technology/javascript/command/functional-programming.html",title:"函数式编程",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Overall",slug:"overall",children:[{level:3,title:"1.(what)什么是函数式编程？",slug:"_1-what-什么是函数式编程",children:[]},{level:3,title:"2.(why)为什么要进行函数式编程？",slug:"_2-why-为什么要进行函数式编程",children:[]},{level:3,title:"3.(how to) 如何进行函数式编程呢？",slug:"_3-how-to-如何进行函数式编程呢",children:[]},{level:3,title:"3-1.高阶函数(high-order function)",slug:"_3-1-高阶函数-high-order-function",children:[]},{level:3,title:"3-2.柯里化函数(currying function)",slug:"_3-2-柯里化函数-currying-function",children:[]}]}],filePathRelative:"technology/javascript/command/functional-programming.md",git:{updatedTime:165812478e4,contributors:[{name:"yunchao.mei",email:"",commits:1}]}}},5618:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var t=a(6252);const p=(0,t._)("h1",{id:"函数式编程",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#函数式编程","aria-hidden":"true"},"#"),(0,t.Uk)(" 函数式编程")],-1),e={class:"custom-container tip"},o=(0,t._)("p",{class:"custom-container-title"},"TIP",-1),c={class:"table-of-contents"},l=(0,t.Uk)("Overall"),u=(0,t.Uk)("1.(what)什么是函数式编程？"),i=(0,t.Uk)("2.(why)为什么要进行函数式编程？"),r=(0,t.Uk)("3.(how to) 如何进行函数式编程呢？"),k=(0,t.Uk)("3-1.高阶函数(high-order function)"),m=(0,t.Uk)("3-2.柯里化函数(currying function)"),d=(0,t.uE)('<h2 id="overall" tabindex="-1"><a class="header-anchor" href="#overall" aria-hidden="true">#</a> Overall</h2><h3 id="_1-what-什么是函数式编程" tabindex="-1"><a class="header-anchor" href="#_1-what-什么是函数式编程" aria-hidden="true">#</a> 1.(what)什么是函数式编程？</h3><p>假如说数学公式是用来描述数字之间的映射关系<code>例如，y=2x, 描述了 xy 之间的映射关系</code></p><p>那么，函数则是编程语言用来描述代码之间映射关系的形式。</p><p>其最大的特征就是输入和输出，且相同的输入无论执行多少次函数？输出结果也都相同。</p><p>所以说，函数式编程 =&gt; 公式编程</p><h3 id="_2-why-为什么要进行函数式编程" tabindex="-1"><a class="header-anchor" href="#_2-why-为什么要进行函数式编程" aria-hidden="true">#</a> 2.(why)为什么要进行函数式编程？</h3><p>函数式编程是对程序的一种抽象。</p><p>让使用函数的人只需关注函数的输入值和输出值即可！而不需要关心函数的实现细节。</p><p>可以大大地提升了编码效率、降低了维护成本。</p><h3 id="_3-how-to-如何进行函数式编程呢" tabindex="-1"><a class="header-anchor" href="#_3-how-to-如何进行函数式编程呢" aria-hidden="true">#</a> 3.(how to) 如何进行函数式编程呢？</h3><h3 id="_3-1-高阶函数-high-order-function" tabindex="-1"><a class="header-anchor" href="#_3-1-高阶函数-high-order-function" aria-hidden="true">#</a> 3-1.高阶函数(high-order function)</h3><details class="custom-container details"><summary>理解高阶函数(high-order function)</summary><ul><li>函数本身可以作为参数</li><li>函数本身可以作为返回值</li></ul><p>满足以上两大特征的函数，均可称为高阶函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Target: 在不改变原有函数的基础上，对其进行拓展</span>\n<span class="token comment">// Result: 先吃饭，再上厕所！</span>\n\n<span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;吃了&quot;</span> <span class="token operator">+</span> args <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数的作为参数</span>\neat<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">afterFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 函数的作为返回值</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    afterFn <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">afterFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> eatAfter <span class="token operator">=</span> eat<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;吃完上厕所&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">eatAfter</span><span class="token punctuation">(</span><span class="token string">&quot;米饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;猪肉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></details><h3 id="_3-2-柯里化函数-currying-function" tabindex="-1"><a class="header-anchor" href="#_3-2-柯里化函数-currying-function" aria-hidden="true">#</a> 3-2.柯里化函数(currying function)</h3><details class="custom-container details"><summary>理解柯里化函数(currying function)</summary><p>柯里化函数：</p><ul><li>柯里化函数的做法：拆分函数参数，使其依次传入。</li><li>柯里化函数的效果： <ul><li>1.会减少函数作用范围</li><li>2.让函数变得更加具体</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 未使用柯里化</span>\n<span class="token keyword">function</span> <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 柯里化</span>\n<span class="token keyword">function</span> <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> isNumber <span class="token operator">=</span> <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token string">&quot;Number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// isNumber(2)</span>\n<span class="token keyword">let</span> isString <span class="token operator">=</span> <span class="token function">checkType</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// isString(&#39;2&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></details><p>函数式编程就是灵活、巧妙地运用上述概念。</p>',16),h={},b=(0,a(3744).Z)(h,[["render",function(n,s){const a=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("div",e,[o,(0,t._)("nav",c,[(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#overall"},{default:(0,t.w5)((()=>[l])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#_1-what-什么是函数式编程"},{default:(0,t.w5)((()=>[u])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#_2-why-为什么要进行函数式编程"},{default:(0,t.w5)((()=>[i])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#_3-how-to-如何进行函数式编程呢"},{default:(0,t.w5)((()=>[r])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#_3-1-高阶函数-high-order-function"},{default:(0,t.w5)((()=>[k])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#_3-2-柯里化函数-currying-function"},{default:(0,t.w5)((()=>[m])),_:1})])])])])])]),d],64)}]])}}]);